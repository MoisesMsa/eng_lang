def merge(arr: int[], left: int, mid: int, right: int) -> void { 
	n1: int = mid - left + 1;
	n2: int = right - mid;
	leftArr: int[] = arr[left:left + n1];
	rightArr: int[] = arr[mid + 1:mid + 1 + n2];

	i: int = 0;
	j: int = 0;
	k: int = left;

	while i < n1 and j < n2 {
		if leftArr[i] <= rightArr[j] {
			arr[k] = leftArr[i];
			i += 1;
		} else {
			arr[k] = rightArr[j];
			j += 1;
		}
		k += 1;
	}

	while i < n1 {
		arr[k] = leftArr[i];
		i += 1;
		k+= 1;
	}
	
	while j < n2 {
		arr[k] = rightArr[j];
		j += 1;
		k += 1;
	}
}
def mergeSort(arr: int[], left: int, right: int) -> void { 
	if left < right {
		mid: int = (left + right); 
		mergeSort(arr, left, mid);
		mergeSort(arr, mid + 1, right); 
		merge(arr, left, mid, right);
	}
}

def main () -> void{
	arr: int[] = [12, 11, 13, 5, 6, 7];
	mergeSort(arr, 0, len(arr) - 1);

	for elem in arr {
		print(elem);
	}
}
